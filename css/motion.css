html {
  box-sizing: border-box;
  font-family: sans-serif;
  font-size: 16px;
}
*,
*::after,
*::before {
  box-sizing: inherit;
} /* con el codigo anterir se reseteo todo el veawport y fijamos las medidad deseadas*/

.box {
  border: thick solid black;
  /* Centramos el marco */
  margin-left: auto;
  margin-right: auto;
  margin-bottom: 5rem;
  width: 200px;
  height: 200px;
}
.card {
  border: thick solid black;
  /* Centramos el marco */
  margin-left: auto;
  margin-right: auto;
  margin-bottom: 5rem;
  width: 600px;
  height: 400px;
}
.card img {
  width: 100%;
  height: 100%;
  object-fit: cover;
  object-position: 0 50%;
}
/* Tranciciones: 
--transition-property
--transition-duration
--transition-timing-funtion none linear ease ease-in ease-out ease-in-out steps
--transition-deley
--transition (property duration timing-funtion delay)
https://developer.mozilla.org/en-US/docs/Web/CSS/CSS_animated_properties
*/
.transitions .box {
  background-color: magenta;
  border-color: green;
  transition-property: background-color;
  transition-duration: 500ms;
  transition-timing-function: ease;
  transition-delay: 0.5s;
  transition: border-color 2s linear 1s;
  /* Con transition all se remplaza todo lo anterior escrito pero afecta a todas las cajas , con posible perdida de control de ellas*/
  transition: all 2s ease-in-out 250ms;
  /* Lo mas recomendado es usarla en l√±as propiedades que nos intereza */
  transition: background-color 2s ease-in-out 250ms,
    border-color 2s ease-in-out 250ms, border-radius 2s ease-in-out 250ms;
}
.transitions .box:hover {
  background-color: aquamarine;
  border-color: red;
  border-radius: 2rem;
}

.transitions .card {
  transition: all 1s ease-out, border-color 3s steps(5), filter 2s ease-in 1s,
    box-shadow 1.5s linear 2s;
}
.transitions .card:hover {
  opacity: 0.75;
  border-color: orchid;
  filter: blur(0.15rem);
  box-shadow: 1rem 1rem 2rem 0.5rem #000;
}
.transitions .card img {
  transition: object-position 2s ease-in-out 3s;
}
.transitions .card img:hover {
  /* Con este efecto la imanen se mueve de izq a der */
  object-position: 00% 50%;
}
.transform-2D img {
  transition: transform 2s ease-in-out;
}
.transform-2D img:hover {
  transform: none;
  transform: translateX(4rem);
  transform: translateY(4rem);
  transform: translate(-4rem, 4rem);
  transform: translate(50%, 50%);
  transform: translate(50%, 100px);
  transform: scaleX(2);
  transform: scaleY(2);
  transform: scale(2, 2);
  transform: scale(-1, -1);
  transform: rotateX(60deg);
  transform: rotateY(80deg);
  transform: rotateZ(50deg);
  transform: rotateZ(-50deg);
  transform: rotate(50deg);
  transform: skewX(25deg);
  transform: skewX(-25deg);
  transform: skewY(-25deg);
  transform: skewY(25deg);
  transform: skew(20deg, 20deg);
  /* matrix:{ scalaX(),skewY(),skewX(),scalaY(), traslationX(), traslationY() } */
  transform: matrix(1, 2, 2, 1, 20, 10);
  transform: translate(25%, -50%) rotate(250deg) skew(20deg, 10deg)
    scale(-0.5, -0.5);
}
.transform-3D {
  /* Para no estar siempre escribiendo perspective(10rem) lo escribimos en el contenedor padre en este caso en transform-3D */
  perspective: 10rem;
}
.transform-3D img {
  transition: transform 2s ease-in-out;
}

.transform-3D img:hover {
  transform: translateZ(4rem);
  transform: perspective(1000px) translateZ(4rem);
  transform: perspective(100rem) translateZ(4rem);
  transform: perspective(10rem) translateZ(4rem);
  transform: perspective(10rem) translateZ(-4rem);
  /* Para no estar siempre escribiendo perspective(10rem) lo escribimos en el contenedor padre en este caso en transform-3D */
  transform: translateZ(4rem);
  transform: translate3d(2rem, 50%, -3rem);
  /* https://developer.mozilla.org/en-US/docs/Web/CSS/transform-function/scale3d */
  transform: scaleZ(1.5);
  transform: scale3d(2, 0.5, 3);
  /* https://developer.mozilla.org/es/docs/Web/CSS/transform-function/rotate3d */
  transform: rotateX(50deg);
  transform: rotatey(50deg);
  transform: rotatey(-50deg);
  transform: rotate3d(1, 1, 1, 30deg);
  transform: rotate3d(1, -0.5, -1, 30deg);
  transform: rotate3d(1, -0.5, -1, -30deg);
  /* https://developer.mozilla.org/en-US/docs/Web/CSS/transform-function/matrix3d */
  transform: matrix3d(1, 0, 0, 0, 0, 1, 6, 0, 0, 0, 1, 0, 50, 100, 0, 1.1);
  transform: rotate3d(1, 2.5, -2, 60deg);
  transform: rotate3d(1, 2.5, -2, 60deg) translate3d(2rem, 50%, 3rem)
    scale3d(2, -5, 3);
}

.transform-origin img {
  transition: transform 2s ease-in-out;
  /* transform-origin: X Y Z; Resibe 3 valor*/
  transform-origin: 50% 50% 0;
  transform-origin: 0 0 0;
  transform-origin: 0;
  transform-origin: top left;
  transform-origin: top right;
  transform-origin: top center; /* etc */
}
.transform-origin img:hover {
  transform: rotate(360deg);
}

.flip-card-1,
.flip-card-2 {
  border: thick solid black;
  /* Centramos el marco */
  margin-left: auto;
  margin-right: auto;
  margin-bottom: 5rem;
  width: 600px;
  height: 400px;

  position: relative; /* para que las 2 caras se posicionen con el position absolute*/
  cursor: pointer; /* Para que el usuario sepa que es un elemento interactivo */
  transition: transform 1s ease-in-out; /* Para que esto tenga un efecto de animacion hay que aplicar una transicion */

  perspective: 10rem;
  transform-style: preserve-3d; /* Establece si los hijos de un elemento que tiene perspectiva en 3D de que forma se ban a comportar. en este caso los flip-face*/
}

.flip-card-2 {
  transform-origin: center right;
}

.flip-card-1:hover {
  /* con este combio de estado hover se hace girar la imagen */
  transform: rotateY(180deg);
}
.flip-card-2:hover {
  /* con este combio de estado hover se hace girar la imagen */
  transform: translateX(-100%) rotateY(-180deg);
}
.flip-card-1 img,
.flip-card-2 img {
  width: 100%;
  height: 100%;
  object-fit: cover;
  object-position: 0 50%;
}
.flip-face {
  position: absolute; /* para que las 2 caras se posicionen con el position relative*/
  width: 100%; /* para que esta div tome el ancho de la targeta */
  height: 100%; /* para que esta div tome el alto de la targeta */
  /* Esta nueva propiedad determina que las caras se visualisen  backface-visibility: visible; este es el valor por defecto*/

  backface-visibility: hidden; /* para que esta propiedad funcione nesecitamos la perspectiva en el contenedor padre de 3D que en este caso es la flis-card-1*/
}
.flip-from {
  transform: rotateY(0deg);
}
.flip-back {
  transform: rotateY(180deg);
}
/* Para manifestar nuestra linea de tiempo en CSS utilizamos @keyframes  */
@keyframes myAwesomeAnimations {
  /* from es fotograma de inicio */
  from {
    opacity: 0;
    transform: translateX(0);
  }
  /* to es el fotograma final */
  to {
    opacity: 1;
    transform: translateX(100%);
  }
}
.my-animation {
  /* Estas son todas las propiedades de la animacion */
  /*  animation: name duration timing-function delay iteration-count direction fill-mode play-state; 
  las realmente obligatorias son name duratios*/
  /* animation: name duration timing-function delay iteration-count direction
    fill-mode play-state; */
  animation-name: myAwesomeAnimations;
  animation-duration: 2s;
  /* para realizar animaciones https://cubic-bezier.com/#.17,.67,.83,.67 */
  animation-timing-function: cubic-bezier(1, 0, 0, 1);
  animation-timing-function: cubic-bezier(0.33, 0.92, 0.92, 0.36);
  animation-timing-function: cubic-bezier(0.17, 0.67, 0.83, 0.67);
  animation-timing-function: ease-in-out;
  animation-delay: 1500ms;
  animation-iteration-count: 1;
  animation-iteration-count: infinite;
  animation-iteration-count: 3;
  animation-direction: normal;
  animation-direction: reverse;
  animation-direction: alternate;
  animation-fill-mode: none;
  /* Al final de la animacion se queda con los estilos finales de la animacion 
  animation-fill-mode: forwards*/
  animation-fill-mode: forwards;
  /* Al inicio de la animacion se queda con los estilos iniciales  animation-fill-mode: backwards*/
  animation-fill-mode: backwards;
  /* animation-fill-mode: both aplica los valores de forwards y backwards   */
  animation-fill-mode: both;
  animation-play-state: paused;
  animation-play-state: running;
  animation: myAwesomeAnimations 1.5s;
  animation: myAwesomeAnimations 1.5s ease 250ms 7 alternate both running;
}

@keyframes myAwesomeAnimations2 {
  0% {
    opacity: 0;
    transform: translateX(0);
  }
  50% {
    opacity: 0.3;
    transform: translateX(-50%);
  }
  75% {
    opacity: 1;
    transform: translateX(50%);
  }
  90% {
    opacity: 1;
    transform: translateX(-100%);
  }
  100% {
    opacity: 0.5;
    transform: translateX(100%);
  }
}

.my-animation-2 {
  animation: myAwesomeAnimations2 2s;
}
