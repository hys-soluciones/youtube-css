html {
  box-sizing: border-box;
  font-family: sans-serif;
  font-size: 16px;
  overflow-x: hidden; /* Para que el scroll orizontal no nos genere conflicto */
}
*,
*::after,
*::before {
  box-sizing: inherit;
} /* con el codigo anterir se reseteo todo el veawport y fijamos las medidad deseadas*/

.box {
  border: thick solid black;
  /* Centramos el marco */
  margin-left: auto;
  margin-right: auto;
  margin-bottom: 5rem;
  width: 200px;
  height: 200px;
}
.card {
  border: thick solid black;
  /* Centramos el marco */
  margin-left: auto;
  margin-right: auto;
  margin-bottom: 5rem;
  width: 600px;
  height: 400px;
}
.card img {
  width: 100%;
  height: 100%;
  object-fit: cover;
  object-position: 0 50%;
}
/* Tranciciones: 
--transition-property
--transition-duration
--transition-timing-funtion none linear ease ease-in ease-out ease-in-out steps
--transition-deley
--transition (property duration timing-funtion delay)
https://developer.mozilla.org/en-US/docs/Web/CSS/CSS_animated_properties
*/
.transitions .box {
  background-color: magenta;
  border-color: green;
  transition-property: background-color;
  transition-duration: 500ms;
  transition-timing-function: ease;
  transition-delay: 0.5s;
  transition: border-color 2s linear 1s;
  /* Con transition all se remplaza todo lo anterior escrito pero afecta a todas las cajas , con posible perdida de control de ellas*/
  transition: all 2s ease-in-out 250ms;
  /* Lo mas recomendado es usarla en l√±as propiedades que nos intereza */
  transition: background-color 2s ease-in-out 250ms,
    border-color 2s ease-in-out 250ms, border-radius 2s ease-in-out 250ms;
}
.transitions .box:hover {
  background-color: aquamarine;
  border-color: red;
  border-radius: 2rem;
}

.transitions .card {
  transition: all 1s ease-out, border-color 3s steps(5), filter 2s ease-in 1s,
    box-shadow 1.5s linear 2s;
}
.transitions .card:hover {
  opacity: 0.75;
  border-color: orchid;
  filter: blur(0.15rem);
  box-shadow: 1rem 1rem 2rem 0.5rem #000;
}
.transitions .card img {
  transition: object-position 2s ease-in-out 3s;
}
.transitions .card img:hover {
  /* Con este efecto la imanen se mueve de izq a der */
  object-position: 00% 50%;
}
.transform-2D img {
  transition: transform 2s ease-in-out;
}
.transform-2D img:hover {
  transform: none;
  transform: translateX(4rem);
  transform: translateY(4rem);
  transform: translate(-4rem, 4rem);
  transform: translate(50%, 50%);
  transform: translate(50%, 100px);
  transform: scaleX(2);
  transform: scaleY(2);
  transform: scale(2, 2);
  transform: scale(-1, -1);
  transform: rotateX(60deg);
  transform: rotateY(80deg);
  transform: rotateZ(50deg);
  transform: rotateZ(-50deg);
  transform: rotate(50deg);
  transform: skewX(25deg);
  transform: skewX(-25deg);
  transform: skewY(-25deg);
  transform: skewY(25deg);
  transform: skew(20deg, 20deg);
  /* matrix:{ scalaX(),skewY(),skewX(),scalaY(), traslationX(), traslationY() } */
  transform: matrix(1, 2, 2, 1, 20, 10);
  transform: translate(25%, -50%) rotate(250deg) skew(20deg, 10deg)
    scale(-0.5, -0.5);
}
.transform-3D {
  /* Para no estar siempre escribiendo perspective(10rem) lo escribimos en el contenedor padre en este caso en transform-3D */
  perspective: 10rem;
}
.transform-3D img {
  transition: transform 2s ease-in-out;
}

.transform-3D img:hover {
  transform: translateZ(4rem);
  transform: perspective(1000px) translateZ(4rem);
  transform: perspective(100rem) translateZ(4rem);
  transform: perspective(10rem) translateZ(4rem);
  transform: perspective(10rem) translateZ(-4rem);
  /* Para no estar siempre escribiendo perspective(10rem) lo escribimos en el contenedor padre en este caso en transform-3D */
  transform: translateZ(4rem);
  transform: translate3d(2rem, 50%, -3rem);
  /* https://developer.mozilla.org/en-US/docs/Web/CSS/transform-function/scale3d */
  transform: scaleZ(1.5);
  transform: scale3d(2, 0.5, 3);
  /* https://developer.mozilla.org/es/docs/Web/CSS/transform-function/rotate3d */
  transform: rotateX(50deg);
  transform: rotatey(50deg);
  transform: rotatey(-50deg);
  transform: rotate3d(1, 1, 1, 30deg);
  transform: rotate3d(1, -0.5, -1, 30deg);
  transform: rotate3d(1, -0.5, -1, -30deg);
  /* https://developer.mozilla.org/en-US/docs/Web/CSS/transform-function/matrix3d */
  transform: matrix3d(1, 0, 0, 0, 0, 1, 6, 0, 0, 0, 1, 0, 50, 100, 0, 1.1);
  transform: rotate3d(1, 2.5, -2, 60deg);
  transform: rotate3d(1, 2.5, -2, 60deg) translate3d(2rem, 50%, 3rem)
    scale3d(2, -5, 3);
}

.transform-origin img {
  transition: transform 2s ease-in-out;
  /* transform-origin: X Y Z; Resibe 3 valor*/
  transform-origin: 50% 50% 0;
  transform-origin: 0 0 0;
  transform-origin: 0;
  transform-origin: top left;
  transform-origin: top right;
  transform-origin: top center; /* etc */
}
.transform-origin img:hover {
  transform: rotate(360deg);
}

.flip-card-1,
.flip-card-2 {
  border: thick solid black;
  /* Centramos el marco */
  margin-left: auto;
  margin-right: auto;
  margin-bottom: 5rem;
  width: 600px;
  height: 400px;

  position: relative; /* para que las 2 caras se posicionen con el position absolute*/
  cursor: pointer; /* Para que el usuario sepa que es un elemento interactivo */
  transition: transform 1s ease-in-out; /* Para que esto tenga un efecto de animacion hay que aplicar una transicion */

  perspective: 10rem;
  transform-style: preserve-3d; /* Establece si los hijos de un elemento que tiene perspectiva en 3D de que forma se ban a comportar. en este caso los flip-face*/
}

.flip-card-2 {
  transform-origin: center right;
}

.flip-card-1:hover {
  /* con este combio de estado hover se hace girar la imagen */
  transform: rotateY(180deg);
}
.flip-card-2:hover {
  /* con este combio de estado hover se hace girar la imagen */
  transform: translateX(-100%) rotateY(-180deg);
}
.flip-card-1 img,
.flip-card-2 img {
  width: 100%;
  height: 100%;
  object-fit: cover;
  object-position: 0 50%;
}
.flip-face {
  position: absolute; /* para que las 2 caras se posicionen con el position relative*/
  width: 100%; /* para que esta div tome el ancho de la targeta */
  height: 100%; /* para que esta div tome el alto de la targeta */
  /* Esta nueva propiedad determina que las caras se visualisen  backface-visibility: visible; este es el valor por defecto*/

  backface-visibility: hidden; /* para que esta propiedad funcione nesecitamos la perspectiva en el contenedor padre de 3D que en este caso es la flis-card-1*/
}
.flip-from {
  transform: rotateY(0deg);
}
.flip-back {
  transform: rotateY(180deg);
}
/* Para manifestar nuestra linea de tiempo en CSS utilizamos @keyframes  */
@keyframes myAwesomeAnimations {
  /* from es fotograma de inicio */
  from {
    opacity: 0;
    transform: translateX(0);
  }
  /* to es el fotograma final */
  to {
    opacity: 1;
    transform: translateX(100%);
  }
}
.my-animation {
  /* Estas son todas las propiedades de la animacion */
  /*  animation: name duration timing-function delay iteration-count direction fill-mode play-state; 
  las realmente obligatorias son name duratios*/
  /* animation: name duration timing-function delay iteration-count direction
    fill-mode play-state; */
  animation-name: myAwesomeAnimations;
  animation-duration: 2s;
  /* para realizar animaciones https://cubic-bezier.com/#.17,.67,.83,.67 */
  animation-timing-function: cubic-bezier(1, 0, 0, 1);
  animation-timing-function: cubic-bezier(0.33, 0.92, 0.92, 0.36);
  animation-timing-function: cubic-bezier(0.17, 0.67, 0.83, 0.67);
  animation-timing-function: ease-in-out;
  animation-delay: 1500ms;
  animation-iteration-count: 1;
  animation-iteration-count: infinite;
  animation-iteration-count: 3;
  animation-direction: normal;
  animation-direction: reverse;
  animation-direction: alternate;
  animation-fill-mode: none;
  /* Al final de la animacion se queda con los estilos finales de la animacion 
  animation-fill-mode: forwards*/
  animation-fill-mode: forwards;
  /* Al inicio de la animacion se queda con los estilos iniciales  animation-fill-mode: backwards*/
  animation-fill-mode: backwards;
  /* animation-fill-mode: both aplica los valores de forwards y backwards   */
  animation-fill-mode: both;
  animation-play-state: paused;
  animation-play-state: running;
  animation: myAwesomeAnimations 1.5s;
  animation: myAwesomeAnimations 1.5s ease 250ms 7 alternate both running;
}
/* Animaciones intermedias se cambia el from y el to por porcentajes % */
@keyframes myAwesomeAnimations2 {
  0% {
    opacity: 0;
    transform: translateX(0);
  }
  50% {
    opacity: 0.3;
    transform: translateX(-50%);
  }
  75% {
    opacity: 1;
    transform: translateX(50%);
  }
  90% {
    opacity: 1;
    transform: translateX(-100%);
  }
  100% {
    opacity: 0.5;
    transform: translateX(100%);
  }
}

.my-animation-2 {
  animation: myAwesomeAnimations2 2s;
  animation: myAwesomeAnimations2 5s;
  animation: myAwesomeAnimations2 1s;
  animation: myAwesomeAnimations2 6s;
}

@keyframes multipleAnimation1 {
  0% {
    opacity: 1;
  }
  50% {
    opacity: 0.5;
  }
  100% {
    opacity: 1;
  }
}

@keyframes multipleAnimation2 {
  0% {
    transform: translateY(0);
  }
  50% {
    transform: translateY(-100%);
  }
  100% {
    transform: translateY(0);
  }
}
.animation-multiple {
  animation: multipleAnimation1 2s infinite;
  animation: multipleAnimation2 2s infinite;
  /* Para hacer la multiple animacion se separan con una coma , los barios @keyframes */
  animation: multipleAnimation1 2s infinite, multipleAnimation2 1s 3;
}
.motion-examples {
  text-align: center;
}
@keyframes fadein {
  0% {
    opacity: 0;
  }
  100% {
    opacity: 1;
  }
}
@keyframes fadeout {
  0% {
    opacity: 1;
  }
  100% {
    opacity: 0;
  }
}
/* alternate se utoliza para evitar el salto que da al comienzo de la animacion y both lo utilizamos para que conserve losestilos al inicio y al final de la animacion */
.fade-in {
  font-size: 5vw;
  animation: fadein 2s linear 2s infinite alternate both;
}
.fade-out {
  font-size: 5vw;
  animation: fadeout 2s linear 2s infinite alternate both;
}
@keyframes shake {
  10%,
  90% {
    transform: translate(-1px, 0);
  }
  20%,
  80% {
    transform: translate(2px, 0);
  }
  30%,
  50%,
  70% {
    transform: translate(-4px, 0);
  }

  40%,
  60% {
    transform: translate(4px, 0);
  }
}
.shake {
  font-size: 5vw;
  cursor: pointer;
  display: inline-block;
}
.shake:hover {
  animation: shake 1s cubic-bezier(0.36, 0.07, 0.19, 0.97) both;
  transform: translate(0, 0);
}
@keyframes pulse {
  0% {
    transform: scale(1.1);
  }
  50% {
    transform: scale(0.8);
  }
  100% {
    transform: scale(1);
  }
}
.pulse {
  font-size: 5vw;
  animation: pulse 1s infinite linear;
}

@keyframes heartColor {
  10% {
    background-color: #d00;
  }
}
/* Vamos a crear un corazo con codigo CSS */
.heart {
  position: relative;
  margin-left: auto;
  margin-right: auto;
  width: 10vw;
  height: 10vw;
  /* background-color: #888; */
  animation: pulse 1s infinite linear;
}
.heart::after,
.heart::before {
  position: absolute; /*  */
  content: ""; /* Este atributo se coloca para que se dibuje lo que queremos antes y despues */
  left: 5vw; /* la mitad del ancho que ledimos a la caja padre */
  top: 0;
  width: 5vw;
  height: 8vw;
  background-color: #a00;
  transform: rotate(-45deg);
  transform-origin: 0 100%;
  border-radius: 5vw 5vw 0 0;
  animation: heartColor 1s infinite;
}
.heart::after {
  left: 0;
  transform: rotate(45deg);
  transform-origin: 100% 100%;
}
@keyframes spinert {
  0% {
    transform: rotate(0deg);
  }
  0% {
  }
  100% {
    transform: rotate(360deg);
  }
}
.spinner {
  /* background-color: red; */
  width: 5vw;
  height: 5vw;
  margin-left: auto;
  margin-right: auto;
  border: 0.5vw solid rgba(0, 0, 0, 0.1);
  border-radius: 50%;
  border-top-color: aqua;
  animation: spinert 1s ease-in-out infinite;
}
/* Animacion de Botones .
Con btn definimos los estilos del boton
*/

.btn {
  position: relative;
  border: none;
  border-radius: 0.25rem;
  padding: 0.2rem;
  width: 15rem;
  height: 2.5rem;
  font-size: 1.25rem;
  font-weight: bold;
  cursor: pointer;
  overflow: hidden;
  box-shadow: 0.25rem 0.25rem 0.5rem 0.25rem rgba(0, 0, 0, 0.2);
}
/* .anim-button::after. Por que queremos que este despues del boton como un border abajo del boton.
con anim-button::after es todo lo referente a formar la linea roja debajo del boton
*/
.anim-button::after {
  content: "";
  position: absolute; /* Porque el elemento padre es relativo */
  bottom: 0;
  width: 0;
  height: 0.25rem; /*  un 10% de la altura original */
  background-color: #d00;
  transition: width 0.5s ease, left 0.5s ease, right 0.5s ease;
}
/* A los elementos que tienen la clase anim-button en el estado hover asu seudo elemento after */
.anim-button:hover:after {
  width: 100%;
}
/*  estas son las que alimentan los movimientos de estas lineas */
.to-left::after {
  left: 0;
}
.to-center::after {
  left: 50%;
}
.to-center:hover::after {
  left: 0;
}
.to-right::after {
  right: 0;
}
/*  para aplicar los efectos de gradientes en este boton */
.anim-bg-gradient {
  background-image: linear-gradient(to right, pink, violet, orange, orangered);
  background-size: 300% 100%; /* Esto lo que hace es estirar el gradiente y solo se veran dos colores*/
  transition: background-position 0.5s ease-in-out; /*  Esta transicion es para que no sea un movimiento subito o rapido */
}
.anim-bg-gradient:hover {
  background-position: 100%, 0; /* Se cambia la posicion del fondo de 0,0 a 100%,0 es desir al final osea alos colores anaranjados, pero para que el cambio no sea subito se hace una transicion fuera del hover*/
}
/* ------------------------------------------- */
.tabs-menu {
  position: relative; /* Para que se centre */
  margin-left: auto;
  margin-right: auto;
  padding: 1rem;
  border-radius: 1rem;
  width: 70%;
  height: 3rem;
  display: flex; /* Para que los elementos hijos trabajen en una linea */
  justify-content: space-between; /* Reparte loe elementos similar entre los espacion */
  align-items: center; /* Para que no halla problemas de alineamiento en vertical */
  background-color: #ddd;
}
.tabs-menu input[type="radio"] {
  display: none;
}
.tabs-menu label {
  position: relative;
  z-index: 1;
  width: calc(100% / 4 -0.5rem);
  /* Calculamos el ancho y lo dividimos entre 4 y le restamos .5rem que ledimos en los padins*/
  text-align: center;
  cursor: pointer;
}
.tabs-menu label:hover {
  color: #fff;
}
.tabs-menu input[type="radio"]:checked + label {
  color: #fff;
}

.tab-bg-hover {
  position: absolute;
  width: calc(100% / 4 - 0.5rem);
  height: 2rem;
  border-radius: 0.5rem;
  background-image: linear-gradient(90deg, #a00, #d00);
  transition: transform 300ms ease-in-out; /* Con esto desimos que aplicamos una transicion en la propiedad transfor que dure 300ms en su movimiento en direccion X y con un efecto de aceleracion de ease-in-out */
}
/* Aca desimo a la #tab-1:checked cuando este chequeada al herano que tiene .tab-bg-hover aplicale una transformacion en  transform: translateX(0);*/
#tab-1:checked ~ .tab-bg-hover {
  transform: translateX(0);
}

#tab-2:checked ~ .tab-bg-hover {
  transform: translateX(100%);
}

#tab-3:checked ~ .tab-bg-hover {
  transform: translateX(200%);
}

#tab-4:checked ~ .tab-bg-hover {
  transform: translateX(300%);
}
/* -BOTON DE AMBURGESA-*/
/* Esta es la clase que activa el boton */
.off-canvas-btn {
  position: fixed; /* LE DAMOS UN POSICIONAMIENTO FIJO */
  bottom: 1rem;
  right: 1rem;
  z-index: 999;
  width: 3rem; /* ancho */
  height: 3rem; /* Alto */
  cursor: pointer;
  /* opacity: 0.25; */
  opacity: 0;
}

.off-canvas-burger {
  position: fixed;
  bottom: 1rem;
  right: 1rem;
  z-index: 998;
  width: 3rem;
  height: 0.6rem; /* de aca para arriba tiene los mismos valores que off-canvas-btn  menos el z-index y el height con .6rem para dividirlo en 5 fracciones*/
  border-radius: 0.3rem;
  background-color: #d00;
  transform: rotate(0deg) translate(0, -1.2rem); /* para que la barra suba mas o menos a la mitad del contenedor */
  transform-origin: top left; /* para que gire desde la ezquina superior izquierda */
  transition: transform 500ms ease, background-color 500ms ease;
  /* background-color 500ms ease;con esto hacemos una animacion cuano se desaparece la linea del centro*/
}
/* Con estas dos seudo clases creamos la linea de arriba y la de abajo */
.off-canvas-burger::before,
.off-canvas-burger::after {
  content: "";
  display: block;
  width: 100%;
  height: 0.6rem;
  border-radius: 0.3rem;
  background-color: #d00;
  transition: transform 500ms ease;
}

.off-canvas-burger::before {
  transform: rotate(0deg) translate(0, -0.9rem);
  /* background-color: blue; */
}

.off-canvas-burger::after {
  transform: rotate(0deg) translate(0, 0.3rem);
  /* background-color: green; */
}

/* Con lo que sigue se hace desaparecer la linea de en medio */
.off-canvas-btn:checked + .off-canvas-burger {
  background-color: transparent;
}
/* Con los siguiente dos movimientos formamos la X */
.off-canvas-btn:checked + .off-canvas-burger::before {
  transform: rotate(45deg) translate(0, 0);
}

.off-canvas-btn:checked + .off-canvas-burger::after {
  transform: rotate(-45deg) translate(0.4rem, -0.5rem);
}
/* Se va a maquetear el menu off-canvas */
.off-canvas-menu {
  position: fixed;
  top: 0;
  left: 0;
  bottom: 0;
  right: 0;
  z-index: 997;
  display: flex;
  justify-content: center; /* Centro en el eje principal*/
  align-items: center; /* Centro en el eje transversal */
  background-color: #0008;
  transition: transform 500ms ease-in-out;
  /* transform: translate(0, -100%);
  transform: translate(0, 100%);
  transform: translate(100%, 0); */
  transform: translate(-100%, 0);
}

.off-canvas-btn:checked ~ .off-canvas-menu {
  transform: translate(0, 0);
}
/* Con lo siguiente le damos estilos al contenedor */
.off-canvas-menu-container {
  width: 100%;
  height: 100vh;
  display: flex; /* con los dos siguientes se centran los enlaces */
  flex-direction: column;
  justify-content: center;
}
/* Domos estilos a los enlaces */
.off-canvas-link {
  border-bottom: thin solid #d00;
  padding: 2rem; /* nos da el espacio de arriba y de abajo */
  font-size: 1.5rem;
  text-align: center;
  text-decoration: none;
  color: #fff;
  transition: background-color 300ms ease;
}
/* Con esto formamos el border de arriba para el primer link */
.off-canvas-link:first-child {
  border-top: thin solid #d00;
}

.off-canvas-link:hover {
  background-color: #d005;
}
