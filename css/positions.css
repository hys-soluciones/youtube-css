/* 
Posicionamiento en CSS.

Las propiedades FLOAT y POSITION nos permiten modificar la posicion natural de culquier elemento del documento HTML.

El navegador coloca cada elemento tenirndo encuenta el orden en el que aparecen en el documento y su tipo de visualizacion dependiendo si es un elemento en linea o en bloque.

Con FLOAT y POSITION podemos modificar este comportamiento.

Elementos Flotantes
--float convierte un elemento en flotante,desplazandolo hasta la zona mas a la izquierda o mas a la derecha de la posicion en la que originalmente se encontraba.
--clear: Limpia la flotacion (left, right, both[que limpiaria a ambos lados])

Tipos de Posicionamiento:
---static(default).
---relative.
---absolute.
---fixed.
---sticky.

Para mover los elementos posicionados se activan las propiedades:
---top(vertical- eje-y-)
---botton(vertical- eje-y-)
---left(horizontal-eje-x)
---rigth(horizontal-eje-x)
---z-index(profundidad-eje-z-)

Las propiedades top y left van a tener preferencia por sobre botton y rigth respectivamente.

Estas 5 posiciones no funcionan con el valor de static.
*/
/* static: Es el valor por defecto, significa que el elemento respeta el flujo del documento HTML, por lo que no puede mover ni posicionar */
.static {
  background-color: yellow;
  /* Esto no afecta en nada al contenido del div static */
  position: static;
  top: 20px;
  left: 50px;
}
/* relative: El elemento conserva sus dimenciones y posicion original en el flujo del documento. Si se mueve tomo como referencia su posicion original*/
.relative {
  background-color: turquoise;
  position: relative;
  width: 300px;
  height: 50px;
  /*  top: 50px;
  left: 50px; */
  /* bottom: 50px; */
  /* right: 50px; */
  /* Cuando se escribe denuevo un top y un left el botton y el right son ignorados */
  top: 190px;
  left: 50px;
}

/* absolute: El elemento pierde sus dimenciones y posicion original en el flujo del documento. Si se mueve puede tomar como referencia 2 elementos: 
---1)-El primer ancestro con posicionamiento relativo.
---2)-Si no encuentra un ancestro relativo, se mueve respecto del documento HTML */
.absolute {
  background-color: tomato;
  position: absolute;
  width: 200px;
  height: 80px;
  text-align: center;
  /* right: 0;
  bottom: 0;  */
  /* top: 100 px;
  left: 100px; */
  right: 0;
  bottom: 0;
}

.relative-parent {
  background-color: khaki;
  position: relative;
  width: 600px;
  height: 50px;
  top: 70px;
  left: 60px;
}
.absolute-child {
  background-color: lightcoral;
  position: absolute;
  /* left: 0;
  top: 0; */
  /*  right: 0;
  bottom: 0; */
  top: -50px;
  left: -30px;
}

/* 
fixed: El elemento pierde sus dimensiones y posicion original en el flujo del documento. Si se mueve toma como referencia el documento HTML y queda fijo en la posicion, cuando el scrol se mueve el elemento no lo hara queda FIJO
*/
.fixed {
  background-color: lawngreen;
  position: fixed;
  width: 300px;
  height: 100px;
  /* right: 20px; 
  bottom: 10px; */
  top: 30px;
  left: 400px;
}
.fixed-2 {
  background-color: blue;
  color: #fff;
  font-size: 2em;
  text-align: center;
  position: fixed;
  z-index: 100;
  width: 100%;
  height: 50px;
  top: 550px;
  left: 0;
}
/* 
sticky: Es una convinacion de posicionamiento relative y fixed, para este posicionamiento las propiedades top, left, botton, right no mueven el elemento, sirven como un punto de referencia mientras no llegen a ese valor el elemento se comporta como relative, cuado llega se comporta como fixed.

Para que este comportamiento funcione el elemento sticky debe ser hijo directo del body o su elemnto contenedor debe tener dimenciones dinamicas y solo sera sticky dentro de las dimenciones de su contenedor padre.
*/
.sticky {
  background-color: lightskyblue;
  position: sticky;
  top: 50px;
}
.sticky-parent {
  background-color: bisque;
  border: thin dashed black;
  height: 500px;
}
.sticky-chid {
  background-color: rgb(59, 150, 100);
  position: sticky;
  top: 75px;
}

/* 
z-index: Es una propiedad que nos permite controlar la profundidad de los elementos proporcionados, su valor por defecto es outo acepta numeros positivos, negativos y cero.
A mayor valor el elemento esta mas al frente, a menor mas al fondo.

Un elemento padre nunca podra estar sobre sus elementos hijos, sin embargo los elementos hijos si pueden dandeles un valor negativo y que el elemento padre no tenga definido valor de z-index.
*/
.z-index-1,
.z-index-2 {
  background-color: mediumaquamarine;
  border: thin solid black;
  font-size: 2em;
  text-align: center;
  position: relative;
  width: 200px;
  height: 200px;
}
.z-index-1 {
  z-index: 1;
  z-index: 0;
}
.z-index-2 {
  top: -150px;
  left: 100px;
  z-index: -1;
}
/* Un elemento padre nunca podra estar sobre 
sus elementos hijos, sin embargo los 
elementos hijos si pueden dandeles un valor 
negativo y que el elemento padre no tenga 
definido valor de z-index. */
.z-index-parent {
  background-color: rgb(207, 131, 226);
  text-align: center;
  font-size: 2em;
  width: 300px;
  height: 300px;
  position: relative;
}
.z-index-child {
  background-color: rgb(182, 69, 140);
  position: relative;
  width: 150px;
  height: 150px;
  top: -75px;
  left: 75px;
  z-index: -2;
}
/* ESTO NO ES ACONCEJABLE */
